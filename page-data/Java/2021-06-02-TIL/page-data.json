{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/2021-06-02-TIL/","result":{"data":{"site":{"siteMetadata":{"title":"여름산책","author":"이주형","siteUrl":"https://juhyung990122.github.io","comment":{"disqusShortName":"Guinness990122","utterances":"Juhyung990122/Juhyung990122"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"2c5f905e-c86b-5814-9445-eace04c0eb7f","excerpt":"🌟 Factory method pattern…","html":"<h2 id=\"-factory-method-pattern\" style=\"position:relative;\"><a href=\"#-factory-method-pattern\" aria-label=\" factory method pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟 Factory method pattern</h2>\n<h2 id=\"-팩토리-메서드-패턴이란\" style=\"position:relative;\"><a href=\"#-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80\" aria-label=\" 팩토리 메서드 패턴이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 팩토리 메서드 패턴이란?</h2>\n<p>팩토리 메서드 패턴은 객체 생성 처리를 서브클래스로 분리하는 패턴입니다.<br>\n객체를 만들어 내는 공장역할을 할 자식클래스를 만든다고 이해하시면 됩니다.<br>\n서브클래스는 어떤 클래스의 객체를 생성할건지에 대해 결정합니다.<br></p>\n<h2 id=\"-사용하는-이유\" style=\"position:relative;\"><a href=\"#-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\" 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 사용하는 이유</h2>\n<p>객체 지향 디자인은 기본적으로 쉽게 확장할 수 있으면서 동시에 수정은 잦지 않아야합니다.<br>\n따라서 수정이 불가피할 경우를 대비하여 자주 수정될 것 같은 부분과<br>\n크게 변하지 않을 부분을 분리하는 것이 좋습니다.<br>\n이떄 객체 생성 기능은 필드가 변화하거나 메소드가 변화할 가능성이 큰 편이라<br>\n생성을 담당하는 부분을 분리하여 결합도를 낮출 필요성이 있습니다.<br>\n<br>\n+) 결합도(의존성)란?<br>\n서로 다른 모듈끼리 연관되어있는 정도를 뜻합니다. <br>\n많이 연결되어있을수록 하나를 수정하면 그와 연관된 많은 것들을 수정해야하는 대참사가 일어납니다.<br>\n완전히 없애는건 가능한지 모르겠고(아마 어려울 것 같다는…느낌…)  <br>\n낮을수록 좋으므로 최대한 낮추려고 해봅시다!<br>\n<br>\n팩토리 메서드 패턴을 사용하면 <br>\n생성과 관련된 정보를 분리하여 관리하므로 결합도가 낮고<br>\n생성기능을 부모클래스에 노출시키지 않음으로서 캡슐화까지 가능하단 점에서 이득입니다.<br></p>\n<h2 id=\"-대략적인-예제\" style=\"position:relative;\"><a href=\"#-%EB%8C%80%EB%9E%B5%EC%A0%81%EC%9D%B8-%EC%98%88%EC%A0%9C\" aria-label=\" 대략적인 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 대략적인 예제</h2>\n<p><a href=\"https://jdm.kr/blog/180\">https://jdm.kr/blog/180</a>\n<a href=\"https://velog.io/@ellyheetov/Factory-Pattern\">https://velog.io/@ellyheetov/Factory-Pattern</a></p>","frontmatter":{"title":"[Java] 팩토리 패턴","date":"June 02, 2021"}}},"pageContext":{"slug":"/Java/2021-06-02-TIL/","previous":{"fields":{"slug":"/Java/2021-06-08-TIL/"},"frontmatter":{"title":"[Java] Enum class 활용하기","category":"Java","draft":false}},"next":{"fields":{"slug":"/Project_log/keyduck개발일지16/"},"frontmatter":{"title":"keyduck개발일지16","category":"Project_log","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}