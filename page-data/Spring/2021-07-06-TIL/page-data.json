{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring/2021-07-06-TIL/","result":{"data":{"site":{"siteMetadata":{"title":"여름산책","author":"이주형","siteUrl":"https://juhyung990122.github.io","comment":{"disqusShortName":"Guinness990122","utterances":"Juhyung990122/Juhyung990122"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"28586e72-8bdf-53ef-a42b-d8459b1b9b72","excerpt":"🌟 MSA 🎯 MSA(Micro Service Architecture)란? 마이크로 서비스 아키텍처란 하나의 시스템을 컴포넌트별로 나누어 개발하고 합쳐서 큰 시스템으로 구축하는 방법입니다.\nMSA도입 이전에는 한 어플리케이션 안에 여러가지 컴포넌트들이 들어있었습니다. 이렇게 하나로 되어있으면 배포 및 테스트나 환경설정이 간단하지만, 시스템이 커지고 기능이 많아질 수록 어플리케이션은 점점 무거워질 뿐 아니라 의존성또한 높아지는 문제점이 있습니다. 이를 해결하기 위해서 MSA…","html":"<h2 id=\"-msa\" style=\"position:relative;\"><a href=\"#-msa\" aria-label=\" msa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟 MSA</h2>\n<h3 id=\"-msamicro-service-architecture란\" style=\"position:relative;\"><a href=\"#-msamicro-service-architecture%EB%9E%80\" aria-label=\" msamicro service architecture란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 MSA(Micro Service Architecture)란?</h3>\n<p>마이크로 서비스 아키텍처란 하나의 시스템을 컴포넌트별로 나누어 개발하고 합쳐서 큰 시스템으로 구축하는 방법입니다.\nMSA도입 이전에는 한 어플리케이션 안에 여러가지 컴포넌트들이 들어있었습니다. 이렇게 하나로 되어있으면 배포 및 테스트나 환경설정이 간단하지만, 시스템이 커지고 기능이 많아질 수록 어플리케이션은 점점 무거워질 뿐 아니라 의존성또한 높아지는 문제점이 있습니다. 이를 해결하기 위해서 MSA를 도입하기 시작했습니다. 이 방법을 사용하면 각 컴포넌트를 분리하여 개발할 수 있으며, 개발된 컴포넌트들은 서로 API를 이용하여 통신하게 됩니다.</p>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯장점</h3>\n<p>MSA는 컴포넌트 단위로 서비스를 분리하여 개발하므로 서버가 독립적입니다. 따라서 서로 의존성이 없기에 부분적인 수정이나 확장에 있어 유연하고 재사용성이 좋습니다. 또한 서버가 독립적이므로 트래픽이 몰릴때 해당 서비스 서버만 증축해주면 됩니다.</p>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯단점</h3>\n<p>서비스가 분리되어있으므로 DB도 따로 쓰거나 하나의 DB를 나누어 사용합니다. 따라서 다른 컴포넌트의 데이터를 가져오려면 API통신을 이용해야하므로 성능이 떨어질 수 있습니다. 또한 서버가 다르므로 URL또한 각기 달라서\n이를 하나로 묶어주는 작업이 필요합니다.(보통 API Gateway 사용)</p>\n<h3 id=\"단점을-극복하기-위해선\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90%EC%9D%84-%EA%B7%B9%EB%B3%B5%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%A0\" aria-label=\"단점을 극복하기 위해선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯단점을 극복하기 위해선?</h3>\n<p>MSA는 서비스간 호출이 많기 때문에 메세징 시스템을 활용합니다. 용어 그대로 어플리케이션간 메시지를 교환하는 시스템이며 대표적으로는 kafka나 AWS SQS가 있습니다. 이를 통해 서비스간 결합도를 낮출 수 있으며 비동기요청이나 성능향상, 안정성등의 이점을 가져갈 수 있습니다. </p>\n<p><a href=\"http://clipsoft.co.kr/wp/blog/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98msa-%EA%B0%9C%EB%85%90/\">http://clipsoft.co.kr/wp/blog/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98msa-%EA%B0%9C%EB%85%90/</a>\n<a href=\"https://victorydntmd.tistory.com/343\">https://victorydntmd.tistory.com/343</a></p>","frontmatter":{"title":"[Spring] MSA란?","date":"July 06, 2021"}}},"pageContext":{"slug":"/Spring/2021-07-06-TIL/","previous":{"fields":{"slug":"/Spring/2021-07-07-TIL/"},"frontmatter":{"title":"[Spring] 메세징 시스템","category":"Spring","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}