{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring/2020-02-16-TIL/","result":{"data":{"site":{"siteMetadata":{"title":"여름산책","author":"이주형","siteUrl":"https://juhyung990122.github.io","comment":{"disqusShortName":"Guinness990122","utterances":"Juhyung990122/Juhyung990122"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"c460177c-41b5-5edf-9ba6-91740273ce77","excerpt":"🌟 Container 🎯컨테이너란? 사람이 입력한 소스를 컨테이너가 받아서 사람대신 컴퓨터 안에서 동작해줄 뿐만 아니라 사람이 직접 작성하지 않은 객체의 생성과 소멸도 알아서 관리해주는 것입니다.\n개인적인 감상으로는 개쩌는 개발자를 컴퓨터 안에 복사해놓은 듯 하네요.\n짱 멋 져 🎯IoC…","html":"<h2 id=\"-container\" style=\"position:relative;\"><a href=\"#-container\" aria-label=\" container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟 Container</h2>\n<h3 id=\"컨테이너란\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%9E%80\" aria-label=\"컨테이너란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯컨테이너란?</h3>\n<p>사람이 입력한 소스를 컨테이너가 받아서 사람대신 컴퓨터 안에서 동작해줄 뿐만 아니라 사람이 직접 작성하지 않은 객체의 생성과 소멸도 알아서 관리해주는 것입니다.\n개인적인 감상으로는 개쩌는 개발자를 컴퓨터 안에 복사해놓은 듯 하네요.\n짱 멋 져</p>\n<h3 id=\"ioc란\" style=\"position:relative;\"><a href=\"#ioc%EB%9E%80\" aria-label=\"ioc란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯IoC란?</h3>\n<p>프레임워크 자체에 제어 권한을 넘기는 전략입니다.\n주로 개발자가 하던 객체 의존관계 제어역할을 프레임워크한테 넘김으로써 개발자는 큰 구조만 설계하고 세부적인 동작이나 호출을 신경쓰지 않을 수 있습니다. 추가적으로 객체 자체에 의존성을 직접적으로 명시하지 않으므로\n유연한 유지보수또한 가능해진다는 장점을 가집니다.</p>\n<p>스프링 안에서의 IoC를 예제로 들자면\n스프링은 개발자가 생성한 객체(POJO)를 관리 컨테이너(서블릿 컨테이너라고 합니다) 가 따로 있으므로\n개발자가 생성한 객체는 xml 설정에 따라 관리해주는 케이스를 들 수 있겠습니다. </p>\n<p>정리하자면 프레임워크 내에 정의된 인터페이스나 추상타입을 상속받아 구현한 뒤 나머지는 너가 관리해주라 라고 하는게 IoC입니다.</p>\n<h3 id=\"di란\" style=\"position:relative;\"><a href=\"#di%EB%9E%80\" aria-label=\"di란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯DI란?</h3>\n<p>객체간의 의존성을 처리할때\n주로 자바에서는 인터페이스로 이런 관계를 처리합니다.</p>\n<h3 id=\"bean이란\" style=\"position:relative;\"><a href=\"#bean%EC%9D%B4%EB%9E%80\" aria-label=\"bean이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯Bean이란?</h3>\n<p>스프링 컨테이너에서 생성되는 객체를 통칭함\n@Component라는 어노테이션으로 스프링 빈 객체에 등록(싱글톤 클래스 빈) == 클래스를 정의했으니 빈으로 등록해줘!라는 뜻\n@Configuration + @Bean 조합으로 쓰는 사람도 많다고 한다 XML설정하기 좋아서 그렇게 쓴다나\n이걸 확장한 @Controller(웹요청,응답을 처리하는 프레젠테이션 레이어), @Service(내부에서 자바로직 수행하는 서비스레이어), @Repository(DAO같이 외부 IO를 처리하는 퍼시스턴스 레이어) 등도 포함\n루트컨테이너에서 웹기술과 관계없는 자원에 대한 것을 빈으로 만들어서 관리 + 전역적인 설정\n@Autowired로 빈을 주입시켜주고,서블릿들은 루트에서 관리하는 빈과 설정들중 필요한 것들을 끌어다가 사용하게 됨.</p>\n<p><a href=\"https://pks424.tistory.com/entry/IoC-DI%EB%9E%80\">https://pks424.tistory.com/entry/IoC-DI란</a>\n<a href=\"https://limmmee.tistory.com/13\">https://limmmee.tistory.com/13</a></p>","frontmatter":{"title":"[Spring] 컨테이너란?","date":"February 16, 2021"}}},"pageContext":{"slug":"/Spring/2020-02-16-TIL/","previous":{"fields":{"slug":"/Project_log/2021-02-03TIL/"},"frontmatter":{"title":"[SpringBoard] Spring board 개발일지1","category":"Project_log","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}