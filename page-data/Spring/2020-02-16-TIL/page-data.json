{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring/2020-02-16-TIL/","result":{"data":{"site":{"siteMetadata":{"title":"여름산책","author":"이주형","siteUrl":"https://juhyung990122.github.io","comment":{"disqusShortName":"Guinness990122","utterances":"Juhyung990122/Juhyung990122"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"c460177c-41b5-5edf-9ba6-91740273ce77","excerpt":"🌟 IoC와 DI 🎯IoC란? 프레임워크 자체에 제어 권한을 넘기는 전략입니다.\n주로 개발자가 하던 객체 의존관계 제어역할을 프레임워크한테 넘김으로써 개발자는 큰 구조만 설계하고 세부적인 동작이나 호출을 신경쓰지 않을 수 있습니다. 추가적으로 객체 자체에 의존성을 직접적으로 명시하지 않으므로\n유연한 유지보수또한 가능해진다는 장점을 가집니다. 스프링 안에서의 IoC를 예제로 들자면\n스프링은 개발자가 생성한 객체(POJO…","html":"<h2 id=\"-ioc와-di\" style=\"position:relative;\"><a href=\"#-ioc%EC%99%80-di\" aria-label=\" ioc와 di permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟 IoC와 DI</h2>\n<h3 id=\"ioc란\" style=\"position:relative;\"><a href=\"#ioc%EB%9E%80\" aria-label=\"ioc란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯IoC란?</h3>\n<p>프레임워크 자체에 제어 권한을 넘기는 전략입니다.\n주로 개발자가 하던 객체 의존관계 제어역할을 프레임워크한테 넘김으로써 개발자는 큰 구조만 설계하고 세부적인 동작이나 호출을 신경쓰지 않을 수 있습니다. 추가적으로 객체 자체에 의존성을 직접적으로 명시하지 않으므로\n유연한 유지보수또한 가능해진다는 장점을 가집니다.</p>\n<p>스프링 안에서의 IoC를 예제로 들자면\n스프링은 개발자가 생성한 객체(POJO)를 관리 컨테이너(서블릿 컨테이너라고 합니다) 가 따로 있으므로\n개발자가 생성한 객체는 xml 설정에 따라 관리해주는 케이스를 들 수 있겠습니다. </p>\n<p>정리하자면 프레임워크 내에 정의된 인터페이스나 추상타입을 상속받아 구현한 뒤 나머지는 너가 관리해주라 라고 하는게 IoC입니다.</p>\n<h3 id=\"di란\" style=\"position:relative;\"><a href=\"#di%EB%9E%80\" aria-label=\"di란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯DI란?</h3>\n<p>DI란 의존성 주입을 의미합니다. 의존성을 가지고 있는 객체의 관계를 처리하기 위한 방법 중 하나인데, 의존적인 객체를 직접 생성하거나 제어하지 않고  앞서 말한 IoC를 통해\n스프링은 내부에 있는 객체를 외부에서 결정하고 연결합니다.</p>\n<h3 id=\"ioc-컨테이너스프링-컨테이너란\" style=\"position:relative;\"><a href=\"#ioc-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%9E%80\" aria-label=\"ioc 컨테이너스프링 컨테이너란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯IoC 컨테이너(스프링 컨테이너)란?</h3>\n<p>IoC기법을 사용하여 사람이 입력한 소스를 컨테이너가 받아서 사람대신 컴퓨터 안에서 동작해줄 뿐만 아니라 사람이 직접 작성하지 않은 객체(Bean)의 생성과 소멸도 알아서 관리해주는 것입니다.이렇게 IoC Container는 Bean을 관리하고 저장하기때문에 BeanFactory라고도 부른다고 하네요.\n개인적인 감상으로는 개쩌는 개발자를 컴퓨터 안에 복사해놓은 듯 하네요.\n짱 멋 져</p>\n<h3 id=\"bean이란\" style=\"position:relative;\"><a href=\"#bean%EC%9D%B4%EB%9E%80\" aria-label=\"bean이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯Bean이란?</h3>\n<p>컨테이너에서 생성, 관계설정 및 관리되는 객체를 통칭합니다.\nBean으로 등록하기 위해서는 설정 메타정보를 xml, annotation 등등으로 설정해줍니다. 이렇게 설정된 메타정보는 BeanDefinitionReader 인터페이스를 통해 BeanDefinition객체로 변환됩니다. 이 객체를 IoC Container가 받아서 DI작업을\n수행하는 것입니다. </p>\n<p><a href=\"https://m.blog.naver.com/PostView.nhn?blogId=pjok1122&#x26;logNo=221744895053&#x26;proxyReferer=https:%2F%2Fwww.google.co.kr%2F\">https://m.blog.naver.com/PostView.nhn?blogId=pjok1122&#x26;logNo=221744895053&#x26;proxyReferer=https:%2F%2Fwww.google.co.kr%2F</a>\n<a href=\"https://pks424.tistory.com/entry/IoC-DI%EB%9E%80\">https://pks424.tistory.com/entry/IoC-DI란</a>\n<a href=\"https://limmmee.tistory.com/13\">https://limmmee.tistory.com/13</a></p>","frontmatter":{"title":"[Spring] 컨테이너란?","date":"February 16, 2021"}}},"pageContext":{"slug":"/Spring/2020-02-16-TIL/","previous":{"fields":{"slug":"/Project_log/2021-02-03TIL/"},"frontmatter":{"title":"[SpringBoard] Spring board 개발일지1","category":"Project_log","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}