{"componentChunkName":"component---src-templates-blog-post-js","path":"/Project_log/2021-02-23TIL/","result":{"data":{"site":{"siteMetadata":{"title":"여름산책","author":"이주형","siteUrl":"https://juhyung990122.github.io","comment":{"disqusShortName":"Guinness990122","utterances":"Juhyung990122/Juhyung990122"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"34945c81-45a5-5adc-a0fa-945d55b86afe","excerpt":"🌟 Spring board를 마무리하며 🎯 깃허브 링크 https://github.com/Juhyung990122/Spring_CRUD\n\n 🎯 다음 프로젝트에서의 개선점 1. Constructor Injection을 통해 의존성을 주입할 것\n\n본 프로젝트에서는 Field Injection을 사용하여 의존성을 주입했습니다.(@Autowired)\n스프링부트의 핵심개념인 DI를 잘 활용하기 위해선 클래스가 독립적으로 인스턴스화(POJO) 할 수 있어야 합니다.\n하지만 @Autowired…","html":"<h2 id=\"-spring-board를-마무리하며\" style=\"position:relative;\"><a href=\"#-spring-board%EB%A5%BC-%EB%A7%88%EB%AC%B4%EB%A6%AC%ED%95%98%EB%A9%B0\" aria-label=\" spring board를 마무리하며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟 Spring board를 마무리하며</h2>\n<h3 id=\"-깃허브-링크\" style=\"position:relative;\"><a href=\"#-%EA%B9%83%ED%97%88%EB%B8%8C-%EB%A7%81%ED%81%AC\" aria-label=\" 깃허브 링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 깃허브 링크</h3>\n<p><a href=\"https://github.com/Juhyung990122/Spring_CRUD\">https://github.com/Juhyung990122/Spring_CRUD</a>\n<br>\n<br></p>\n<h3 id=\"-다음-프로젝트에서의-개선점\" style=\"position:relative;\"><a href=\"#-%EB%8B%A4%EC%9D%8C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\" 다음 프로젝트에서의 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 다음 프로젝트에서의 개선점</h3>\n<p><strong>1. Constructor Injection을 통해 의존성을 주입할 것</strong>\n<br>\n본 프로젝트에서는 Field Injection을 사용하여 의존성을 주입했습니다.(@Autowired)<br>\n스프링부트의 핵심개념인 DI를 잘 활용하기 위해선 클래스가 독립적으로 인스턴스화(POJO) 할 수 있어야 합니다.\n하지만 @Autowired를 사용하게 되면 DI컨테이너와 클래스간의 결합이 생겨서 위의 개념을 위배하게 됩니다.\n<br><br>\n이와달리 Constructor Injection은 클래스가 독립적이므로 단위테스트에 용이하고(아래 yaboong님 블로그 참고) 순환참조 또한 막아줍니다. 따라서 다음 프로젝트부터는 <code class=\"language-text\">Constructor Injection</code>을 통해 의존성을 주입할 예정입니다.\n<br><br><br></p>\n<p><strong>2. 객체 생성시 Builder패턴을 사용할 것</strong>\n<br>\n본 프로젝트에서는 자바빈 패턴으로 객체를 생성했습니다. <br>\nsetter메서드를 사용하여 읽기는 좋았으나 setter을 반복적으로 호출한다는 점이 지저분하다고 느꼈습니다.(참고블로그를 보니 생성한 객체에 값을 떡칠한다고 하시는데 왕공감..) 또한 Lombok을 사용하다보니 @setter을 붙이면 모든 필드에 setter가 생겨서 변경하지 않아야 할 필드값도 조작할 수 있게되는게 찜찜했습니다.<br><br>\n이와 달리 builder 패턴은 객체 생성시점에서 값을 전부 넣게 되고, setter을 사용하지 않을 수 있습니다.\n또한 build()함수로 객체의 일관성이나 오류를 한번 더 잡을 수도 있습니다.<br>\n따라서 다음 프로젝트부터는 <code class=\"language-text\">Builder패턴</code>을 사용하여 객체를 생성할 예정입니다.\n<br><br><br></p>\n<p><strong>3. Request, Response 에 DTO를 사용할 것</strong>\n<br>\n본 프로젝트에서는 Response 에 Entity를 직접적으로 사용했었습니다.\n하지만 Entity 클래스는 데이터의 틀이다보니 당연히 너무너무 코어하므로 최대한 직접적인 사용을 지양해야합니다.<br>\n수많은 서비스클래스나 로직들이 Entity클래스에서 끌어다 쓰는 형식인지라 Entity에서 하나라도 변경되면 전부를 수정해야하는 그런… 눈물이 앞을 가리는 상황이 벌어집니다.(저도 알고싶지 않았어요…ㅎ…)\n또한 서비스마다 다른 Response format을 적용하기도 쉽지않았습니다.<br></p>\n<p>이를 동시에 해결 할 수 있는 것은 Entity클래스와 Request, Response에서 DTO 클래스를 분리하는 것입니다. 따라서 다음 프로젝트부터는 Entity와는 별개의 <code class=\"language-text\">DTO</code>를 정의하여 사용할 예정입니다.</p>\n<p><a href=\"https://madplay.github.io/post/why-constructor-injection-is-better-than-field-injection\">https://madplay.github.io/post/why-constructor-injection-is-better-than-field-injection</a>\n<a href=\"https://jojoldu.tistory.com/251\">https://jojoldu.tistory.com/251</a>\n<a href=\"https://johngrib.github.io/wiki/builder-pattern/\">https://johngrib.github.io/wiki/builder-pattern/</a>\n<a href=\"https://yaboong.github.io/spring/2019/08/29/why-field-injection-is-bad/\">https://yaboong.github.io/spring/2019/08/29/why-field-injection-is-bad/</a></p>","frontmatter":{"title":"[Spring] Spring CRUD를 마무리하며","date":"February 23, 2021"}}},"pageContext":{"slug":"/Project_log/2021-02-23TIL/","previous":{"fields":{"slug":"/Review_log/travis_ci사용기/"},"frontmatter":{"title":"[Review]Travis ci로 배포 자동화 시키기","category":"Review_log","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}